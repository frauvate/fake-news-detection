# -*- coding: utf-8 -*-
"""mogodb-gnews-apiV1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H-dsjFqJ1i_7WRVF9XkfmpO4oGDijihW
"""

from google.colab import userdata
!pip install newsapi-python
!pip install pymongo
from newsapi import NewsApiClient
import json

# Gerekli kütüphaneyi yüklediğinizden emin olun.
# !pip install "pymongo[srv]" --upgrade

from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

# Kullanıcı adınız ve yeni şifrenizle oluşturulmuş tam ve doğru bağlantı kodu
uri = "our_url"

# Bir client oluştur ve sunucuya bağlan
client = MongoClient(uri, server_api=ServerApi('1'))

# Bağlantının başarılı olduğunu doğrulamak için bir ping gönder
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)

# Gerekli kütüphaneleri yükleyelim
!pip install requests pymongo

import requests
from pymongo import MongoClient
from pymongo.server_api import ServerApi
from datetime import datetime
import traceback # Hata detaylarını (traceback) yakalamak için

# 1. ADIM: KURULUM BİLGİLERİ (Sizin verdiğiniz bilgilerle dolu)
# ---------------------------------------------------------------------
MONGO_PASSWORD = "password"
GNEWS_API_KEY = "your_GNEWS_API_KEY"
# ---------------------------------------------------------------------

# MongoDB bağlantı URI'si
uri = "our_url"

# 2. ADIM: VERİTABANI VE KOLEKSİYONLARI TANIMLAMA
DB_NAME = "news_database"
# YENİ: İki ayrı koleksiyon tanımlıyoruz.
ARTICLES_COLLECTION_NAME = "articles"
LOGS_COLLECTION_NAME = "crawler_logs"

# MongoDB'ye bağlanma ve koleksiyonları seçme
try:
    print("MongoDB'ye bağlanılıyor...")
    client = MongoClient(uri, server_api=ServerApi('1'))
    client.admin.command('ping')
    db = client[DB_NAME]
    articles_collection = db[ARTICLES_COLLECTION_NAME]
    logs_collection = db[LOGS_COLLECTION_NAME] # Log koleksiyonunu seçiyoruz
    print("MongoDB bağlantısı başarılı!")
except Exception as e:
    # Eğer en başta veritabanına bağlanamazsak, bunu loglayamayız ama ekrana yazdırırız.
    print(f"KRİTİK HATA: MongoDB'ye bağlanılamadı. Hata: {e}")
    exit() # Kodun devam etmesini engelle

# 3. ADIM: CRAWLER'I ÇALIŞTIRMA VE LOGLAMA
print("\nCrawler işlemi başlatılıyor...")
try:
    # API isteğini at
    country = "tr"
    lang = "tr"
    url = f"https://gnews.io/api/v4/top-headlines?country={country}&lang={lang}&token={GNEWS_API_KEY}"

    # Timeout eklemek, API'nin yanıt vermemesi durumunda kodun sonsuza dek beklemesini engeller.
    response = requests.get(url, timeout=15)
    # Eğer API 4xx veya 5xx gibi bir HTTP hata kodu dönerse, bu satır otomatik olarak bir hata fırlatır.
    response.raise_for_status()

    data = response.json()
    articles = data.get("articles", [])

    # BAŞARILI DURUM: Makaleler çekildiyse
    if articles:
        articles_collection.insert_many(articles)

        # Başarı log'u oluştur ve veritabanına kaydet
        success_log = {
            "timestamp": datetime.utcnow(),
            "level": "INFO",
            "message": f"{len(articles)} adet makale başarıyla çekildi ve veritabanına eklendi.",
            "source": "gnews_fetcher",
            "details": {"article_count": len(articles)},
            "publishedAt": article.get("publishedAt")
        }
        logs_collection.insert_one(success_log)
        print(f"BAŞARILI: {success_log['message']}")
    else:
        # API'den makale gelmediyse, bu bir hata değil ama bir uyarıdır.
        warning_log = {
            "timestamp": datetime.utcnow(),
            "level": "WARNING",
            "message": "API isteği başarılı oldu ancak hiç makale dönmedi.",
            "source": "gnews_fetcher"
        }
        logs_collection.insert_one(warning_log)
        print(f"UYARI: {warning_log['message']}")

except Exception as e:
    # HATA DURUMU: Herhangi bir hata olursa bu blok çalışır
    print(f"HATA: Crawler çalışırken bir problem oluştu. Detaylar veritabanına log'lanıyor...")

    # Hata log'u oluştur ve veritabanına kaydet
    error_log = {
        "timestamp": datetime.utcnow(),
        "level": "ERROR",
        "message": "Crawler çalışırken bir istisna (exception) oluştu.",
        "source": "gnews_fetcher",
        "details": {
            "error_type": type(e).__name__,
            "error_message": str(e),
            "traceback": traceback.format_exc() # Hatanın tüm teknik detayını yakalar
        }
    }
    logs_collection.insert_one(error_log)
    print("Hata detayları 'crawler_logs' koleksiyonuna başarıyla kaydedildi.")

finally:
    # Bu blok, kod başarılı da olsa hata da verse her zaman çalışır.
    client.close()
    print("\nİşlem tamamlandı. Veritabanı bağlantısı güvenli bir şekilde kapatıldı.")



